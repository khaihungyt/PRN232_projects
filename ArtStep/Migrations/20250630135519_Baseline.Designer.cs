// <auto-generated />
using System;
using ArtStep.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtStep.Migrations
{
    [DbContext(typeof(ArtStepDbContext))]
    [Migration("20250630135519_Baseline")]
    partial class Baseline
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ArtStep.Data.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.Property<short?>("isStatus")
                        .HasColumnType("smallint");

                    b.HasKey("AccountId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ArtStep.Data.Cart", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CartId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ArtStep.Data.CartDetail", b =>
                {
                    b.Property<string>("CartDetailID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CartId")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("QuantityBuy")
                        .HasColumnType("int");

                    b.Property<string>("ShoeCustomId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("CartDetailID");

                    b.HasIndex("CartId");

                    b.HasIndex("ShoeCustomId");

                    b.ToTable("CartsDetail");
                });

            modelBuilder.Entity("ArtStep.Data.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("longtext");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ArtStep.Data.Feedback", b =>
                {
                    b.Property<string>("FeedbackId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DesignerReceiveFeedbackId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FeedbackDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("FeedbackStars")
                        .HasColumnType("int");

                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserSendFeedbackId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("FeedbackId");

                    b.HasIndex("DesignerReceiveFeedbackId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserSendFeedbackId");

                    b.ToTable("feedback", (string)null);
                });

            modelBuilder.Entity("ArtStep.Data.Message", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MessageDescription")
                        .HasColumnType("longtext");

                    b.Property<bool?>("MessageType")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ReadTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReceivedId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("SendAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("SenderId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("MessageId");

                    b.HasIndex("ReceivedId");

                    b.HasIndex("SenderId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("ArtStep.Data.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("VNPayPaymentId")
                        .HasColumnType("bigint");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("ArtStep.Data.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailId")
                        .HasColumnType("varchar(255)");

                    b.Property<double?>("CostaShoe")
                        .HasColumnType("double");

                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("QuantityBuy")
                        .HasColumnType("int");

                    b.Property<string>("ShoeCustomId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShoeCustomId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("ArtStep.Data.ShoeCustom", b =>
                {
                    b.Property<string>("ShoeId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DesignerUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<short?>("IsHidden")
                        .HasColumnType("smallint");

                    b.Property<double?>("PriceAShoe")
                        .HasColumnType("double");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShoeDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ShoeName")
                        .HasColumnType("longtext");

                    b.HasKey("ShoeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DesignerUserId");

                    b.ToTable("ShoeCustom");
                });

            modelBuilder.Entity("ArtStep.Data.ShoeImage", b =>
                {
                    b.Property<string>("ImageId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImageLink")
                        .HasColumnType("longtext");

                    b.Property<string>("ShoeCustomId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ImageId");

                    b.HasIndex("ShoeCustomId");

                    b.ToTable("ShoeImages");
                });

            modelBuilder.Entity("ArtStep.Data.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageProfile")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<short?>("isActive")
                        .HasColumnType("smallint");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ArtStep.Data.Wallet", b =>
                {
                    b.Property<string>("WalletId")
                        .HasColumnType("varchar(255)");

                    b.Property<double>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<short>("IsActive")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("ArtStep.Data.WalletTransaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("varchar(255)");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<double>("BalanceAfter")
                        .HasColumnType("double");

                    b.Property<double>("BalanceBefore")
                        .HasColumnType("double");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ExternalTransactionId")
                        .HasColumnType("longtext");

                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("TransactionType")
                        .HasColumnType("longtext");

                    b.Property<string>("WalletId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("TransactionId");

                    b.HasIndex("OrderId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ReporterId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ReporterRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ReportId");

                    b.HasIndex("ReporterId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("ArtStep.Data.Account", b =>
                {
                    b.HasOne("ArtStep.Data.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("ArtStep.Data.Account", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtStep.Data.Cart", b =>
                {
                    b.HasOne("ArtStep.Data.User", "Users")
                        .WithOne("Cart")
                        .HasForeignKey("ArtStep.Data.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ArtStep.Data.CartDetail", b =>
                {
                    b.HasOne("ArtStep.Data.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId");

                    b.HasOne("ArtStep.Data.ShoeCustom", "ShoeCustom")
                        .WithMany("CartDetails")
                        .HasForeignKey("ShoeCustomId");

                    b.Navigation("Cart");

                    b.Navigation("ShoeCustom");
                });

            modelBuilder.Entity("ArtStep.Data.Feedback", b =>
                {
                    b.HasOne("ArtStep.Data.User", "DesignersReceived")
                        .WithMany("ReceivedFeedbacks")
                        .HasForeignKey("DesignerReceiveFeedbackId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ArtStep.Data.Order", "Order")
                        .WithMany("Feedbacks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ArtStep.Data.User", "UserSend")
                        .WithMany("SentFeedbacks")
                        .HasForeignKey("UserSendFeedbackId");

                    b.Navigation("DesignersReceived");

                    b.Navigation("Order");

                    b.Navigation("UserSend");
                });

            modelBuilder.Entity("ArtStep.Data.Message", b =>
                {
                    b.HasOne("ArtStep.Data.User", "UserReceived")
                        .WithMany()
                        .HasForeignKey("ReceivedId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ArtStep.Data.User", "UserSend")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UserReceived");

                    b.Navigation("UserSend");
                });

            modelBuilder.Entity("ArtStep.Data.Order", b =>
                {
                    b.HasOne("ArtStep.Data.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtStep.Data.OrderDetail", b =>
                {
                    b.HasOne("ArtStep.Data.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("ArtStep.Data.ShoeCustom", "ShoeCustom")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ShoeCustomId");

                    b.Navigation("Order");

                    b.Navigation("ShoeCustom");
                });

            modelBuilder.Entity("ArtStep.Data.ShoeCustom", b =>
                {
                    b.HasOne("ArtStep.Data.Category", "Category")
                        .WithMany("ShoeCustoms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ArtStep.Data.User", "Designer")
                        .WithMany("ShoeCustoms")
                        .HasForeignKey("DesignerUserId");

                    b.Navigation("Category");

                    b.Navigation("Designer");
                });

            modelBuilder.Entity("ArtStep.Data.ShoeImage", b =>
                {
                    b.HasOne("ArtStep.Data.ShoeCustom", "ShoeCustom")
                        .WithMany("Images")
                        .HasForeignKey("ShoeCustomId");

                    b.Navigation("ShoeCustom");
                });

            modelBuilder.Entity("ArtStep.Data.Wallet", b =>
                {
                    b.HasOne("ArtStep.Data.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("ArtStep.Data.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtStep.Data.WalletTransaction", b =>
                {
                    b.HasOne("ArtStep.Data.Order", "Order")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ArtStep.Data.Wallet", "Wallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Order");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Report", b =>
                {
                    b.HasOne("ArtStep.Data.User", "Reporter")
                        .WithMany("Reports")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("ArtStep.Data.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("ArtStep.Data.Category", b =>
                {
                    b.Navigation("ShoeCustoms");
                });

            modelBuilder.Entity("ArtStep.Data.Order", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("OrderDetails");

                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("ArtStep.Data.ShoeCustom", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("Images");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ArtStep.Data.User", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Cart");

                    b.Navigation("Orders");

                    b.Navigation("ReceivedFeedbacks");

                    b.Navigation("Reports");

                    b.Navigation("SentFeedbacks");

                    b.Navigation("ShoeCustoms");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("ArtStep.Data.Wallet", b =>
                {
                    b.Navigation("WalletTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
